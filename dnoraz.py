import re
import traceback
import json
import sys
import sqlite3
import logging
import asyncio
import secrets
import string
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from telegram.error import BadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests
from fastapi import FastAPI, Request

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_USERNAME = 'OdnorazkiGash_bot'
TOKEN = "7683476302:AAFIG1xhxu_nlr0QwL0ODILT9X_DXCYaEqw"
CRYPTOBOT_TOKEN = "362476:AAm3PuFC1uXxJEjnEyXfVGJ40GoKhHWLYY0"
CRYPTOBOT_API = "https://pay.crypt.bot/api"
ADMIN_ID = "1470249044"
app = FastAPI()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def check_db():
    conn = sqlite3.connect('workers.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É referrals –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS referrals (
        referral_id INTEGER PRIMARY KEY,
        worker_id INTEGER,
        visitor_id INTEGER,
        visit_date TEXT,
        payment_received INTEGER DEFAULT 0,
        payment_amount REAL,
        payment_date TEXT,
        FOREIGN KEY (worker_id) REFERENCES workers(worker_id)
    )''')

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    cursor.execute('PRAGMA table_info(referrals)')
    columns = [col[1] for col in cursor.fetchall()]

    if 'visit_date' not in columns:
        cursor.execute('ALTER TABLE referrals ADD COLUMN visit_date TEXT')

    conn.commit()
    conn.close()


check_db()
def init_db():
    conn = sqlite3.connect('workers.db')
    cursor = conn.cursor()

    # –¢–∞–±–ª–∏—Ü–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS workers (
        worker_id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        worker_code TEXT UNIQUE,
        register_date TEXT
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS referrals (
        referral_id INTEGER PRIMARY KEY AUTOINCREMENT,
        worker_id INTEGER,
        visitor_id INTEGER,
        payment_received INTEGER DEFAULT 0,
        payment_amount REAL DEFAULT 0,
        payment_date TEXT,
        FOREIGN KEY (worker_id) REFERENCES workers (worker_id)
    )''')

    # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS payments (
        payment_id INTEGER PRIMARY KEY AUTOINCREMENT,
        invoice_id TEXT UNIQUE,
        user_id INTEGER,
        amount REAL,
        product_id TEXT,
        status TEXT DEFAULT 'pending',
        created_at TEXT,
        updated_at TEXT
    )''')

    conn.commit()
    conn.close()



def setup_webhook():
    response = requests.post(
        f"{CRYPTOBOT_API}/setWebhook",
        headers={"Crypto-Pay-API-Token": CRYPTOBOT_TOKEN},
        json={
            "url": "https://–≤–∞—à-—Å–µ—Ä–≤–µ—Ä.com/cryptobot_webhook",
            "events": ["invoice_paid"]
        }
    )
    print("Webhook setup:", response.json())

# –í—ã–∑–æ–≤–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
setup_webhook()
async def check_worker_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ—Ä–∫–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç—ã –∏ –ø—Ä–æ—Ñ–∏—Ç)"""
    try:
        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–æ—Ä–∫–µ—Ä–∞!")
            return

        worker_code = context.args[0]
        conn = sqlite3.connect('workers.db')

        try:
            cursor = conn.cursor()
            cursor.execute('SELECT telegram_id FROM workers WHERE worker_code = ?', (worker_code,))
            if not (worker_data := cursor.fetchone()):
                await update.message.reply_text("‚ùå –í–æ—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            stats = get_worker_stats(worker_data[0])
            await update.message.reply_text(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ {worker_code}:\n"
                f"üí∞ –û–ø–ª–∞—Ç—ã: {stats['payments']}\n"
                f"üíµ –ü—Ä–æ—Ñ–∏—Ç: {stats['profit']:.2f} USDT\n"
                f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats['last_update']}",
                parse_mode='HTML'
            )
        finally:
            conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ check_worker_stats: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


def get_worker_stats(worker_id: int) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î"""
    stats = {
        'payments': 0,
        'profit': 0.0,
        'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    try:
        with sqlite3.connect('workers.db') as conn:
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø–ª–∞—Ç
            cursor.execute('''
            SELECT 
                COUNT(*) as payments,
                SUM(payment_amount) as profit
            FROM referrals
            WHERE worker_id = ? AND payment_received = 1
            ''', (worker_id,))

            result = cursor.fetchone()

            if result and result[0]:
                stats['payments'] = result[0]
                stats['profit'] = float(result[1] or 0)

    except Exception as e:
        print(f"Error in get_worker_stats: {str(e)}")

    return stats


async def worker_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ –º–µ–Ω—é –≤–æ—Ä–∫–µ—Ä–∞"""
    user = update.effective_user
    user_id = user.id

    try:
        # 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect('workers.db')
        conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –ø–æ –∏–º–µ–Ω–∏
        cursor = conn.cursor()

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ—Ä–∫–µ—Ä–∞
        cursor.execute('''
        SELECT worker_code, register_date 
        FROM workers 
        WHERE telegram_id = ?
        ''', (user_id,))

        worker = cursor.fetchone()

        if not worker:
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ—Ä–∫–µ—Ä.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            return

        # 3. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cursor.execute('''
        SELECT 
            COUNT(CASE WHEN payment_received = 1 THEN 1 END) as total_payments,
            COALESCE(SUM(CASE WHEN payment_received = 1 THEN payment_amount END), 0) as total_profit,
            COUNT(CASE WHEN payment_received = 1 AND payment_date >= datetime('now', '-24 hours') THEN 1 END) as daily_payments,
            COALESCE(SUM(CASE WHEN payment_received = 1 AND payment_date >= datetime('now', '-24 hours') THEN payment_amount END), 0) as daily_profit
        FROM referrals
        WHERE worker_id = (SELECT worker_id FROM workers WHERE telegram_id = ?)
        ''', (user_id,))

        stats = cursor.fetchone()

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞ #{worker['worker_code']}\n"
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            f"‚åõ –ó–∞ 24 —á–∞—Å–∞:\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç—ã: {stats['daily_payments']}\n"
            f"‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç: {stats['daily_profit']:.2f} USDT\n\n"
            f"üìà –í—Å–µ–≥–æ:\n"
            f"‚Ä¢ –û–ø–ª–∞—Ç—ã: {stats['total_payments']}\n"
            f"‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç: {stats['total_profit']:.2f} USDT\n\n"
            f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n"
            f"t.me/{BOT_USERNAME}?start=ref_{worker['worker_code']}"
        )

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            text=message,
            parse_mode=None,
            disable_web_page_preview=True
        )

    except sqlite3.Error as e:
        print(f"Database error: {str(e)}")
        await update.message.reply_text(
            "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    except Exception as e:
        print(f"Unexpected error: {traceback.format_exc()}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö."
        )
    finally:
        conn.close() if 'conn' in locals() else None

def generate_worker_code():
    return ''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range(8))


def generate_ref_link(worker_code):
    return f"https://t.me/{BOT_USERNAME}?start=ref_{worker_code}"








def verify_db_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("[DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î...")

    required_tables = {
        'workers': ['worker_id', 'telegram_id', 'worker_code', 'register_date'],
        'referrals': [
            'referral_id', 'worker_id', 'visitor_id', 'visit_date',
            'payment_received', 'payment_amount', 'payment_date', 'payment_tx'
        ]
    }

    conn = None
    try:
        conn = sqlite3.connect('workers.db')
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        existing_tables = [row[0] for row in cursor.fetchall()]
        print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

        for table in required_tables:
            if table not in existing_tables:
                print(f"[ERROR] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞–±–ª–∏—Ü–∞: {table}")
                return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
        for table, columns in required_tables.items():
            cursor.execute(f"PRAGMA table_info({table})")
            existing_columns = [row[1] for row in cursor.fetchall()]
            print(f"[DEBUG] –¢–∞–±–ª–∏—Ü–∞ {table} –∏–º–µ–µ—Ç –∫–æ–ª–æ–Ω–∫–∏: {existing_columns}")

            for col in columns:
                if col not in existing_columns:
                    print(f"[ERROR] –í —Ç–∞–±–ª–∏—Ü–µ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞: {col}")
                    return False

        print("[INFO] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –≤ –ø–æ—Ä—è–¥–∫–µ")
        return True

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ë–î: {e}")
        return False
    finally:
        if conn:
            conn.close()


# –í –Ω–∞—á–∞–ª–µ main() –¥–æ–±–∞–≤—å—Ç–µ:
print("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===")
verify_db_structure()
# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def update_worker_stats():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
    conn = sqlite3.connect('workers.db')
    cursor = conn.cursor()

    # –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
    time_24h_ago = (datetime.now() - timedelta(hours=24)).strftime('%Y-%m-%d %H:%M:%S')
    cursor.execute('DELETE FROM worker_stats WHERE visit_date < ? AND payment_date IS NULL', (time_24h_ago,))

    conn.commit()
    conn.close()




# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
MAIN_PRODUCTS = [
    {"name": "–û–¥–Ω–æ—Ä–∞–∑–∫–∞ —Å –¢–ì–ö –Ω–∞ 5000 –∑–∞—Ç—è–∂–µ–∫", "id": "game"},
    {"name": "–û–¥–Ω–æ—Ä–∞–∑–∫–∞ —Å –¢–ì–ö –Ω–∞ 3500 –∑–∞—Ç—è–∂–µ–∫", "id": "pc"},
    {"name": "–û–¥–Ω–æ—Ä–∞–∑–∫–∞ —Å –¢–ì–ö –Ω–∞ 1500 –∑–∞—Ç—è–∂–µ–∫", "id": "gadgets"},
    {"name": "–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "id": "change_data"}
]

# –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö
PRODUCTS_DATA = {
    "game_1": {
        "name": "–í–∫—É—Å Yuzu + Orange (5000 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "60 usdt",
        "photo": "https://i.postimg.cc/pXbFnQLw/1.jpg",

    },
    "game_2": {
        "name": "–í–∫—É—Å Banana + Melon (5000 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "60 usdt",
        "photo": "https://i.postimg.cc/L4zzDQw9/1.jpg",

    },
    "game_3": {
        "name": "–í–∫—É—Å Mint (5000 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "60 usdt",
        "photo": "https://i.postimg.cc/FHK39rRz/3.jpg",

    },
    "game_4": {
        "name": "–í–∫—É—Å Fuji apple (5000 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "60 usdt",
        "photo": "https://i.postimg.cc/wj3yCwfs/4.jpg",
    },
    "pc_1": {
        "name": "–í–∫—É—Å Yuzu + Orange (3500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "50 usdt",
        "photo": "https://i.postimg.cc/pXbFnQLw/1.jpg",

    },
    "pc_2": {
        "name": "–í–∫—É—Å Banana + Melon (3500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "50 usdt",
        "photo": "https://i.postimg.cc/L4zzDQw9/1.jpg",

    },
    "pc_3": {
        "name": "–í–∫—É—Å Mint (3500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "50 usdt",
        "photo": "https://i.postimg.cc/FHK39rRz/3.jpg",

    },
    "pc_4": {
        "name": "–í–∫—É—Å Fuji apple (3500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "50 usdt",
        "photo": "https://i.postimg.cc/wj3yCwfs/4.jpg",

    },
    "gadgets_1": {
        "name": "–í–∫—É—Å Yuzu + Orange (1500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "40 usdt",
        "photo": "https://i.postimg.cc/pXbFnQLw/1.jpg",

    },
    "gadgets_2": {
        "name": "–í–∫—É—Å Banana + Melon (1500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "40 usdt",
        "photo": "https://i.postimg.cc/L4zzDQw9/1.jpg",

    },
    "gadgets_3": {
        "name": "–í–∫—É—Å Mint (1500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "40 usdt",
        "photo": "https://i.postimg.cc/FHK39rRz/3.jpg",

    },
    "gadgets_4": {
        "name": "–í–∫—É—Å Fuji apple (1500 –∑–∞—Ç—è–∂–µ–∫)",
        "description": "–í—Å–µ –Ω–∞—à–∏ –æ–¥–Ω–æ—Ä–∞–∑–∫–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∫—É—Å–æ–º –∏ —Ä–∞–∑–º–µ—Ä–æ–º, –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –ø–ª–æ—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö –ø–æ–¥ –≤–∏–¥–æ–º –∑–∞—Ä—è–¥–Ω–æ–≥–æ –±–ª–æ–∫–∞",
        "price": "40 usdt",
        "photo": "https://i.postimg.cc/wj3yCwfs/4.jpg",

    }
}

SUB_PRODUCTS = {
    "game": ["game_1", "game_2", "game_3", "game_4"],
    "pc": ["pc_1", "pc_2", "pc_3", "pc_4"],
    "gadgets": ["gadgets_1", "gadgets_2", "gadgets_3", "gadgets_4"]
}

CITY_REGEX = r'^[–∞-—è–ê-–Ø—ë–Åa-zA-Z\s]+$'


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤"""
    user = update.effective_user
    user_id = user.id
    username = user.username or "–±–µ–∑ username"
    first_name = user.first_name or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
    last_name = user.last_name or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

    # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    log_message = (
        f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n"
        f"ID: {user_id}\n"
        f"Username: @{username}\n"
        f"–ò–º—è: {first_name} {last_name}\n"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if context.args and context.args[0].startswith('ref_'):
        worker_code = context.args[0][4:]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ –≤–æ—Ä–∫–µ—Ä–∞

        log_message += (
            f"üîó –ü–µ—Ä–µ—à–µ–ª –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n"
            f"–ö–æ–¥ –≤–æ—Ä–∫–µ—Ä–∞: {worker_code}\n"
        )

        conn = sqlite3.connect('workers.db')
        try:
            cursor = conn.cursor()

            # 1. –ù–∞—Ö–æ–¥–∏–º –≤–æ—Ä–∫–µ—Ä–∞ –ø–æ –∫–æ–¥—É
            cursor.execute(
                'SELECT worker_id, telegram_id FROM workers WHERE worker_code = ?',
                (worker_code,)
            )
            worker = cursor.fetchone()

            if worker:
                worker_id, worker_telegram_id = worker

                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor.execute(
                    'SELECT 1 FROM referrals WHERE visitor_id = ? AND worker_id = ?',
                    (user_id, worker_id)
                )

                if not cursor.fetchone():
                    # 3. –§–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥
                    cursor.execute(
                        '''INSERT INTO referrals 
                        (worker_id, visitor_id, visit_date) 
                        VALUES (?, ?, ?)''',
                        (
                            worker_id,
                            user_id,
                            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        )
                    )
                    conn.commit()

                    log_message += (
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–æ—Ä–∫–µ—Ä—É\n"
                        f"ID –≤–æ—Ä–∫–µ—Ä–∞: {worker_id}\n"
                        f"TG –≤–æ—Ä–∫–µ—Ä–∞: {worker_telegram_id}\n"
                    )
                else:
                    log_message += "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –±—ã–ª –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É –≤–æ—Ä–∫–µ—Ä—É —Ä–∞–Ω–µ–µ\n"
            else:
                log_message += f"‚ùå –í–æ—Ä–∫–µ—Ä —Å –∫–æ–¥–æ–º {worker_code} –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
        except Exception as e:
            log_message += f"‚õî –û—à–∏–±–∫–∞ –ë–î: {str(e)}\n"
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")
        finally:
            conn.close()
    else:
        log_message += "üîÑ –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏)\n"

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    log_message += f"‚è± –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
    print(log_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª
    with open('referral_logs.txt', 'a', encoding='utf-8') as f:
        f.write(log_message + "\n" + "=" * 50 + "\n")

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤):"
    )
    context.user_data['waiting_for_city'] = True


async def handle_city_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    if not context.user_data.get('waiting_for_city'):
        return

    city = update.message.text.strip()

    if re.fullmatch(CITY_REGEX, city, flags=re.IGNORECASE):
        del context.user_data['waiting_for_city']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∞–≤–∫–µ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        delivery_message = (
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n"
            "–ú—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –≤–∞–º —Å–ø–æ—Å–æ–±–æ–º –≤–∫–ª—é—á–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—á—Ç—ã, "
            "—ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ —É–¥–æ–±–Ω–æ –Ω–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ. –¢–æ–≤–∞—Ä –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∑–∞–∫—Ä—ã—Ç—ã—Ö –Ω–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö "
            "–∏ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ QR-–∫–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Å–ª—è—Ç—Å—è –≤ –ø–æ—á—Ç–µ –∫–∞–∫ –∑–∞—Ä—è–¥–Ω—ã–π –±–ª–æ–∫ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        await update.message.reply_text(delivery_message)
        await show_main_menu(update.message)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã!\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )


async def show_main_menu(message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton(product["name"], callback_data=f"category_{product['id']}")]
        for product in MAIN_PRODUCTS if product['id'] != 'change_data'
    ]
    keyboard.append([InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="change_data")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=reply_markup
    )


async def show_sub_products(update: Update, category: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    query = update.callback_query
    await query.answer()

    product_ids = SUB_PRODUCTS.get(category, [])
    keyboard = [
        [InlineKeyboardButton(PRODUCTS_DATA[pid]["name"], callback_data=f"product_{pid}")]
        for pid in product_ids
    ]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])

    try:
        await query.edit_message_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except BadRequest:
        await query.message.reply_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )


async def show_product(update: Update, product_id: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä —Å –∫–Ω–æ–ø–∫–æ–π '–û–ø–ª–∞—Ç–∏—Ç—å'"""
    query = update.callback_query
    await query.answer()

    product = PRODUCTS_DATA.get(product_id, {})
    category = product_id.split('_')[0]

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"payment_{product_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_{category}")]
    ]

    await query.message.reply_photo(
        photo=product.get("photo"),
        caption=(
            f"<b>{product['name']}</b>\n\n"
            f"{product['description']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{product['price']}</b>"
        ),
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é show_payment
async def show_payment(update: Update, product_id: str) -> None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –≤–æ—Ä–∫–µ—Ä—É"""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id

    try:
        product = PRODUCTS_DATA[product_id]
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "60 usdt" -> 60)
        amount = float(product['price'].split()[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–æ—Ä–∫–µ—Ä–∞
        with sqlite3.connect('workers.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
            SELECT w.worker_code FROM referrals r
            JOIN workers w ON r.worker_id = w.worker_id
            WHERE r.visitor_id = ?
            ORDER BY r.visit_date DESC LIMIT 1
            ''', (user_id,))
            result = cursor.fetchone()
            worker_code = result[0] if result else "UNKNOWN"

        # –§–æ—Ä–º–∏—Ä—É–µ–º payload —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –≤–æ—Ä–∫–µ—Ä–µ
        payload = {
            "asset": "USDT",
            "amount": str(amount),
            "description": f"–ü–æ–∫—É–ø–∫–∞: {product['name']}",
            "payload": json.dumps({
                "user_id": user_id,
                "worker_code": worker_code,
                "product_id": product_id
            }),
            "paid_btn_url": f"https://t.me/{BOT_USERNAME}"
        }

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å
        response = requests.post(
            f"{CRYPTOBOT_API}/createInvoice",
            headers={"Crypto-Pay-API-Token": CRYPTOBOT_TOKEN},
            json=payload
        )
        invoice = response.json()['result']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        with sqlite3.connect('workers.db') as conn:
            conn.execute('''
            INSERT INTO payments (invoice_id, user_id, worker_code, amount, product_id, status, created_at)
            VALUES (?, ?, ?, ?, ?, 'pending', ?)
            ''', (
                invoice['invoice_id'],
                user_id,
                worker_code,
                amount,
                product_id,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–ª–∞—Ç—ã
        keyboard = [
            [InlineKeyboardButton(f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount} USDT", url=invoice['pay_url'])],
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"notify_{worker_code}")]
        ]

        await query.edit_message_caption(
            caption=f"<b>–¢–æ–≤–∞—Ä:</b> {product['name']}\n<b>–°—É–º–º–∞:</b> {amount} USDT",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='HTML'
        )

    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
@app.post("/cryptobot_webhook")
async def handle_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç Cryptobot"""
    data = await request.json()

    if data.get('status') == 'paid':
        try:
            payload = json.loads(data['payload'])
            user_id = payload['user_id']
            product_id = payload['product_id']
            amount = float(data['amount'])
            invoice_id = data['invoice_id']

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ—Ä–∫–µ—Ä–µ
            with sqlite3.connect('workers.db') as conn:
                cursor = conn.cursor()

                # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                SELECT w.worker_id, w.worker_code 
                FROM referrals r
                JOIN workers w ON r.worker_id = w.worker_id
                WHERE r.visitor_id = ?
                ORDER BY r.visit_date DESC LIMIT 1
                ''', (user_id,))

                worker = cursor.fetchone()

                if worker:
                    worker_id, worker_code = worker

                    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
                    cursor.execute('''
                    INSERT INTO payments (invoice_id, user_id, amount, product_id, status, created_at)
                    VALUES (?, ?, ?, ?, 'paid', ?)
                    ''', (invoice_id, user_id, amount, product_id, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))

                    # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                    await application.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂!\n"
                             f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                             f"üõí –¢–æ–≤–∞—Ä: {product_id}\n"
                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
                             f"üë∑ –í–æ—Ä–∫–µ—Ä: {worker_code}\n\n"
                             f"–î–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\n"
                             f"/pay {worker_code} {amount}"
                    )
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
                    await application.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"üí∏ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –±–µ–∑ –≤–æ—Ä–∫–µ—Ä–∞!\n"
                             f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
                             f"üõí –¢–æ–≤–∞—Ä: {product_id}\n"
                             f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}"
                    )

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

    return {"status": "ok"}
async def confirm_payment(update: Update, product_id: str) -> None:
    query = update.callback_query
    await query.answer()

    try:
        # –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await query.message.reply_text(
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"
        )
    except Exception:
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

async def safe_edit_or_reply(query, text: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ"""
    try:
        if query.message.photo:
            await query.message.edit_caption(caption=text, reply_markup=None)
        else:
            await query.edit_message_text(text)
    except BadRequest:
        await query.message.reply_text(text)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
async def pay_worker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ—Ä–∫–µ—Ä—É"""
    if str(update.effective_user.id) != ADMIN_ID:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    try:
        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /pay <–∫–æ–¥_–≤–æ—Ä–∫–µ—Ä–∞> <—Å—É–º–º–∞>")
            return

        worker_code = context.args[0]
        amount = float(context.args[1])

        with sqlite3.connect('workers.db') as conn:
            cursor = conn.cursor()

            # 1. –ù–∞—Ö–æ–¥–∏–º –≤–æ—Ä–∫–µ—Ä–∞
            cursor.execute('SELECT worker_id FROM workers WHERE worker_code = ?', (worker_code,))
            worker = cursor.fetchone()

            if not worker:
                await update.message.reply_text(f"‚ùå –í–æ—Ä–∫–µ—Ä —Å –∫–æ–¥–æ–º {worker_code} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            worker_id = worker[0]

            # 2. –ù–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            cursor.execute('''
            INSERT INTO referrals (worker_id, visitor_id, payment_received, payment_amount, payment_date)
            VALUES (?, ?, 1, ?, ?)
            ''', (
                worker_id,
                int(datetime.now().timestamp()),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º timestamp –∫–∞–∫ visitor_id –¥–ª—è —Ä—É—á–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
                amount,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))

            conn.commit()

            # 3. –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute('''
            SELECT 
                COUNT(*) as total_payments,
                COALESCE(SUM(payment_amount), 0) as total_profit
            FROM referrals
            WHERE worker_id = ? AND payment_received = 1
            ''', (worker_id,))

            stats = cursor.fetchone()

            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} USDT –≤–æ—Ä–∫–µ—Ä—É {worker_code}\n\n"
                f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {stats['total_payments']}\n"
                f"‚Ä¢ –û–±—â–∏–π –ø—Ä–æ—Ñ–∏—Ç: {stats['total_profit']:.2f} USDT"
            )

    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
async def test_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—É–º–º—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if update.effective_user.id != 1470249044:  # –í–∞—à user_id
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        return

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã: /testpay [amount] [worker_code]
    amount = 50.0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    worker_code = "HRfzo8ZG"  # –ö–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if context.args:
        try:
            if len(context.args) >= 1:
                amount = float(context.args[0])
            if len(context.args) >= 2:
                worker_code = context.args[1].upper()
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /testpay [amount] [worker_code]")
            return

    conn = None
    try:
        conn = sqlite3.connect('workers.db')
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º worker_id –ø–æ –∫–æ–¥—É
        cursor.execute('SELECT telegram_id FROM workers WHERE worker_code = ?', (worker_code,))
        worker_data = cursor.fetchone()

        if not worker_data:
            await update.message.reply_text(f"‚ùå –í–æ—Ä–∫–µ—Ä —Å –∫–æ–¥–æ–º {worker_code} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        worker_id = worker_data[0]

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
        test_visitor_id = int(datetime.now().timestamp() % 1000000)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        cursor.execute('''
        INSERT INTO referrals 
        (worker_id, visitor_id, visit_date, payment_received, payment_amount, payment_date)
        VALUES (?, ?, ?, 1, ?, ?)
        ''', (
            worker_id,
            test_visitor_id,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            amount,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_24h = get_worker_stats(worker_id, last_24h=True)
        stats_total = get_worker_stats(worker_id)

        await update.message.reply_text(
            f"üü¢ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∞!\n"
            f"üíº –í–æ—Ä–∫–µ—Ä: {worker_code} (ID: {worker_id})\n"
            f"üë§ –ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å: {test_visitor_id}\n"
            f"üí∞ –°—É–º–º–∞: {amount:.2f} USDT\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24—á:\n"
            f"üë• –ü–µ—Ä–µ—Ö–æ–¥—ã: {stats_24h['visits']}\n"
            f"üí≥ –û–ø–ª–∞—Ç—ã: {stats_24h['payments']}\n"
            f"üíµ –ü—Ä–æ—Ñ–∏—Ç: {stats_24h['profit']:.2f} USDT\n\n"
            f"üìà –í—Å–µ–≥–æ:\n"
            f"üë• –ü–µ—Ä–µ—Ö–æ–¥—ã: {stats_total['visits']}\n"
            f"üí≥ –û–ø–ª–∞—Ç—ã: {stats_total['payments']}\n"
            f"üíµ –ü—Ä–æ—Ñ–∏—Ç: {stats_total['profit']:.2f} USDT",
            parse_mode='HTML'
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()}")
    finally:
        if conn:
            conn.close()
def add_test_referral(worker_id: int, visitor_id: int):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞"""
    conn = sqlite3.connect('workers.db')
    try:
        cursor = conn.cursor()
        cursor.execute('''
        INSERT INTO referrals 
        (worker_id, visitor_id, visit_date, payment_received)
        VALUES (?, ?, ?, 0)
        ''', (
            worker_id,
            visitor_id,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        conn.commit()
        print(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ—Ö–æ–¥: worker={worker_id}, visitor={visitor_id}")
    finally:
        conn.close()
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    query = update.callback_query
    await query.answer()  # –í—Å–µ–≥–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º

    if not query.data:
        logging.error("–ü–æ–ª—É—á–µ–Ω callback_query –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö")
        return

    user_id = update.effective_user.id
    data = query.data
    logging.info(f"User {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {data}")

    try:
        if data.startswith("category_"):
            category = data.replace("category_", "")
            logging.info(f"–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}")
            await show_sub_products(update, category)

        elif data.startswith("product_"):
            product_id = data.replace("product_", "")
            logging.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞: {product_id}")
            await show_product(update, product_id)

        elif data.startswith("payment_"):
            product_id = data.replace("payment_", "")
            logging.info(f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_id}")
            await show_payment(update, product_id)

        elif data.startswith("paid_"):
            product_id = data.replace("paid_", "")
            logging.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_id}")
            await confirm_payment(update, product_id)

        elif data == "main_menu":
            logging.info("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await show_main_menu(query.message)

        elif data == "change_data":
            logging.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
            await query.message.reply_text(
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤):"
            )
            context.user_data['waiting_for_city'] = True

        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

    except BadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ Telegram API –≤ button_click: {e}")
        await query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ button_click: {e}", exc_info=True)
        try:
            await query.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        except Exception as fallback_error:
            logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {fallback_error}")


async def handle_invalid_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
    if context.user_data.get('waiting_for_city'):
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ —Ñ–æ—Ç–æ/—Ñ–∞–π–ª–æ–≤)!"
        )


async def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    init_db()
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î...")
    if not verify_db_structure():
        print("–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_input))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(CommandHandler("OdnorazGashWorker", worker_menu))
    application.add_handler(CommandHandler("TuQwPPPvZL23", check_worker_stats))
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("testpay", test_payment))
    application.add_handler(CommandHandler("pay", pay_worker))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    print("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–¥–∞—á–∏:


    # 3. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    global bot_app
    bot_app = application

    try:
        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await application.initialize()
        await application.start()
        await application.updater.start_polling()
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è
        while True:
            await asyncio.sleep(1)

    except asyncio.CancelledError:
        print("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
    finally:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        try:
            await application.updater.stop()
            await application.stop()
            await application.shutdown()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

        scheduler.shutdown(wait=False)
        print("–ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
bot_app = None


# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
def get_bot_context():
    return bot_app


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Windows
        if sys.platform == "win32":
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

        asyncio.run(run_bot())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        print(f"\n–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    print("=== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===")
    main()